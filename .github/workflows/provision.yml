name: provision

on: [push]

env:
  KIND_NODE_VERSION: v1.27.1
  BUCKET_NAME: devopsthde-bucket
  # AWS
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_DEFAULT_REGION: 'eu-central-1'
  # Azure
  ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

jobs:
  provision-kind-with-crossplane:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@master

      - name: Install microk8s using actions/microk8s-action
        uses: balchua/microk8s-actions@v0.3.2
        with:
          channel: '1.26/stable'
          addons: '["dns", "host-access", "hostpath-storage"]'

      - name: Spin up kind cluster & try to use the cluster
        run: |
          echo "### Let's try to access our cluster via kubectl"
          kubectl get nodes
      
      - name: Install crossplane via Helm
        run: |
          echo "### Create a namespace for crossplane"
          kubectl create namespace crossplane-system

          echo "### Install crossplane via Helm"
          helm dependency update crossplane-install
          helm upgrade --install crossplane --namespace crossplane-system crossplane-install

      - name: Check crossplane status
        run: |
          helm list -n crossplane-system

          echo "### Wait for crossplane to become ready before installing Providers"
          kubectl wait --for=condition=ready pod -l app=crossplane --namespace crossplane-system --timeout=120s

          kubectl get all -n crossplane-system
      
      - name: Configure crossplane to access AWS (now using Upbound AWS Provider)
        run: |
          echo "### Create aws-creds.conf file"
          echo "[default]
          aws_access_key_id = $AWS_ACCESS_KEY_ID
          aws_secret_access_key = $AWS_SECRET_ACCESS_KEY
          " > aws-creds.conf
          
          echo "### Create AWS Provider secret"
          kubectl create secret generic aws-creds -n crossplane-system --from-file=creds=./aws-creds.conf

          echo "### Install the crossplane AWS Provider"
          kubectl apply -f provider-aws-upbound/config/provider-aws.yaml

          kubectl get provider.pkg.crossplane.io

          echo "### Wait until AWS Provider is up and running"
          kubectl wait --for=condition=healthy --timeout=180s provider/provider-aws

          echo "### Create ProviderConfig to consume the Secret containing AWS credentials"
          kubectl apply -f provider-aws-upbound/config/provider-config-aws.yaml

          echo "### Get overall provider status"
          kubectl get provider

      - name: Configure crossplane to access Azure
        run: |
          echo "### Create crossplane-azure-provider-key.json file"
          echo "{
            \"clientId\": \"$ARM_CLIENT_ID\",
            \"clientSecret\": \"$ARM_CLIENT_SECRET\",
            \"subscriptionId\": \"$ARM_SUBSCRIPTION_ID\",
            \"tenantId\": \"$ARM_TENANT_ID\",
            \"activeDirectoryEndpointUrl\": \"https://login.microsoftonline.com\",
            \"resourceManagerEndpointUrl\": \"https://management.azure.com/\",
            \"activeDirectoryGraphResourceId\": \"https://graph.windows.net/\",
            \"sqlManagementEndpointUrl\": \"https://management.core.windows.net:8443/\",
            \"galleryEndpointUrl\": \"https://gallery.azure.com/\",
            \"managementEndpointUrl\": \"https://management.core.windows.net/\"
          }" > crossplane-azure-provider-key.json
          
          echo "### Create Azure Provider secret"
          kubectl create secret generic azure-account-creds -n crossplane-system --from-file=creds=./crossplane-azure-provider-key.json

          echo "### Install the crossplane Azure Provider"
          kubectl apply -f provider-azure-crossplane-contrib/config/provider-azure.yaml

          kubectl get provider.pkg.crossplane.io

          echo "### Wait until Azure Provider is up and running"
          kubectl wait --for=condition=healthy --timeout=120s provider/provider-azure

          echo "### Create ProviderConfig to consume the Secret containing Azure credentials"
          kubectl apply -f provider-azure-crossplane-contrib/config/provider-config-azure.yaml

          echo "### Get overall provider status"
          kubectl get provider

      - name: AWS -> Create XRD, Composition & Claim to create S3 Bucket (now using Upbound AWS Provider)
        run: |
          echo "### Create CompositeResourceDefinition (XRD)"
          kubectl apply -f provider-aws-upbound/s3/definition.yaml
          kubectl get xrd
          
          echo "### Wait for XRD to become Offered"
          kubectl wait --for=condition=Offered --timeout=120s xrd xobjectstorages.crossplane.jonashackt.io  

          echo "### Create Composition"
          kubectl apply -f provider-aws-upbound/s3/composition.yaml

          echo "### Create Claim, which should create S3 Bucket"
          kubectl apply -f provider-aws-upbound/s3/claim.yaml

          echo "### Show some debug info"
          kubectl get crossplane 
          kubectl describe bucket.s3.aws.upbound.io/devopsthde-bucket

          echo "### Wait until Claim & XR (Composite) are ready"
          kubectl wait --for=condition=ready --timeout=120s claim managed-upbound-s3

          echo "### Show crossplane overall status"
          kubectl get crossplane 

      - name: AWS -> Upload index.html to S3 and check deployment works
        run: |
          echo "### Upload index.html to Bucket via AWS CLI"
          aws s3 sync static "s3://$BUCKET_NAME" --acl public-read

          echo "### Access S3 Bucket static website"
          curl "http://$BUCKET_NAME.s3-website.eu-central-1.amazonaws.com"

      - name: AWS -> Delete index.html and remove Claim for S3 Bucket deletion
        run: |
          echo "### Delete index.html from S3 Bucket"
          aws s3 rm "s3://$BUCKET_NAME/index.html"

          echo "### Remove CompositeResourceClaim to delete S3 Bucket"
          kubectl delete -f provider-aws-upbound/s3/claim.yaml

      - name: Azure -> Create XRD, Composite & Claim to create ResourceGroup & StorageAccount
        run: |
          echo "### Create CompositeResourceDefinition (XRD)"
          kubectl apply -f provider-azure-crossplane-contrib/storageaccount/definition.yaml
          kubectl get xrd
          
          echo "### Wait for XRD to become Offered"
          kubectl wait --for=condition=Offered --timeout=120s xrd xobjectstorages.crossplane.jonashackt.io  

          echo "### Create Composition"
          kubectl apply -f provider-azure-crossplane-contrib/storageaccount/composition.yaml

          echo "### Create Claim, which should create ResourceGroup & StorageAccount"
          kubectl apply -f provider-azure-crossplane-contrib/storageaccount/claim.yaml

          echo "### Show crossplane overall status"
          kubectl get crossplane 

          echo "### Wait until Claim & XR (Composite) are ready"
          kubectl wait --for=condition=ready --timeout=120s resourcegroup.azure.crossplane.io/rg-crossplane 

      - name: Azure -> Delete Resources
        run: |
          echo "### Remove CompositeResourceClaim to delete Storage Account and Resource Group"
          kubectl delete account.storage.azure.crossplane.io/account4c8672f 
          kubectl delete resourcegroup.azure.crossplane.io/rg-crossplane